{
  "uuid": "411fa820-60c1-4b87-b006-4795bd4a4033",
  "author": "Toon Ketels",
  "title": "On passport.js, specific use cases",
  "alias": "on-passportjs-specific-use-cases",
  "type": "article",
  "tags": [
    "expressjs",
    "passportjs",
    "nodejs"
  ],
  "content": "<p><a href=\"/articles/understanding-passportjs-authentication-flow\">In the previous post</a>, I talked about the authentication flow and the flow for subsequent requests using passportjs. This post will cover some specific use cases.</p>\n<h2>What user information to store in the session and what not?</h2>\n<p>It&#39;s best to keep the session information small and only attach user information you actually need (note: some user info should be kept - like for instance the user ID, otherwise passport cannot use its Session Strategy).</p>\n<p>However, if you use the <code>deserializeUser</code> method to go and load the user from the db based on the user ID attached to the session, it&#39;s better to store the entire user object in the session. This will prevent a roundtrip to the database on every request just to fetch user information.</p>\n<h2>How to split up passportjs configuration between multiple files?</h2>\n<p><a href=\"https://github.com/jaredhanson/passport-local/blob/master/examples/express3/app.js\">In the example</a>, all password configuration and Local Strategy definition was specified in the main <code>app.js</code> file.</p>\n<p>The passport instance we get back from <code>require(&#39;passport&#39;)</code> is a singleton. So we can just configure express to <em>use the passport middleware</em> in <code>app.js</code> while <em>configuring passport</em> in another file. They all need to <code>require(&#39;passport&#39;)</code>.</p>\n<p>There&#39;s no need to pass the password instance around.</p>\n<h2>What if my form elements are named email and password instead of username and password?</h2>\n<p>Configure which values passport should use from the request body by the options object passed while configuring the Local Strategy.</p>\n<pre><code>passport.use(new LocalStrategy(\n    {\n        usernameField: &#39;email&#39;,\n        passwordField: &#39;password&#39;    \n    },\n    function verify(email, password, done) {\n\n        findByEmail(email, function(err, user) {\n            if (err) return done(err);\n            if (!user) return done(null, false);\n            passwordHash.compare(password, user.password, function(err, res) {\n                if (err) return done(err);\n                if (!res) return done(null, false);\n                done(null, user);\n            });\n        });\n    }\n));</code></pre>\n<h2>What if I don&#39;t like how passport.authenicate redirects the user but want to respond with a JSON response?</h2>\n<p>Don&#39;t use <code>passport.authenticate</code> as middleware but invoke it directly in the request handler. We need to manually call <code>login</code> for this to work.</p>\n<pre><code>app.post(&#39;/login&#39;, function handleLocalAuthentication(req, res, next) {\n\n    passport.authenticate(&#39;local&#39;, function(err, user, info) {\n        if (err) return next(err);\n        if (!user) {\n            return res.json(403, {\n                message: &quot;no user found&quot;\n            });\n        }\n\n        // Manually establish the session...\n        req.login(user, function(err) {\n            if (err) return next(err);\n            return res.json({\n                message: &#39;user authenticated&#39;,\n            });\n        });\n\n    })(req, res, next);\n};</code></pre>\n<h2>How to restrict access to certain pages?</h2>\n<p>Just define your own middleware to be invoked on certain routes to restrict access. </p>\n<pre><code>// Define it\nmodule.exports = function restrict(req, res, next) {\n    if (req.isUnAuthenticated()) return req.json(403, {message: &#39;Access denied, please log in&#39;});\n\n    next();\n}</code></pre>\n<p>Use it when setting up your routes.</p>\n<pre><code>// Use the restrict middleware\napp.get(&#39;/route-with-restricted-access&#39;, restrict, function(res, res, next) {\n    // Handle request...\n});</code></pre>\n<p>If the user object contains role information, we could make additional checks on which role a user has and depending on that restrict access. </p>\n",
  "teaser": "<p><a href=\"/articles/understanding-passportjs-authentication-flow\">In the previous post</a>, I talked about the authentication flow and the flow for subsequent requests using passportjs. This post will cover some specific use cases.</p>\n<h2>What user information to store in the ...</h2>",
  "createDate": "2013-11-05T09:10:26+01:00",
  "updateDate": "2013-11-05T09:10:26+01:00",
  "createDateFormatted": "2013.11.05",
  "updateDateFormatted": "2013.11.05",
  "createDateTimestamp": "1383639026",
  "updateDateTimestamp": "1383639026"
}